
#include "sys_pmu.h"
#include "sys_common.h"
#include "system.h"
#include "stdint.h"
#include "os_projdefs.h"
#include "can.h"
#include "esm.h"
#include "sci.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include "sys_core.h"
#include "sys_vim.h"

/* Include FreeRTOS scheduler files */
#include "FreeRTOS.h"
#include "os_task.h"
#include "os_semphr.h"
#include "os_portmacro.h"

/* Include HET header file - types, definitions and function declarations for system driver */
#include "het.h"
#include "gio.h"

/* Define Task Handles */
xTaskHandle canTaskTcb;
xTaskHandle CATcb;
xTaskHandle steerTaskTcb;
xTaskHandle cruiseControlTaskTcb;


int *intvectreg = (int *) 0xFFFFFE70;
int *intindexreg = (int *) 0xFFFFFE00;

#define LOW         0
#define HIGH        1
#define DATA_LEN    8

#define LED_TASK 0

#define UART_ABS scilinREG //Tx ABS data
#define UART_STEER sciREG //Tx steering data
#define UART_STACK_SIZE   ( ( unsigned portSHORT ) 256 )

uint8 rx_str_data[5];
uint8 rx_data[DATA_LEN];
char rxMbox1[5];
char rxMbox2[5];
int rxIntMbox1;

SemaphoreHandle_t canIntRxSem;
SemaphoreHandle_t accSem;
SemaphoreHandle_t cruiseControlSem;

uint32 mailBox;

/* Degradation cruise control task PID ; ONOFF ; Lateral Control */



/* Variable for implementing Dynamic Speed Adaptation according to the paper
 *
 * Paper : Dynamic Speed Adaptation for Path Tracking Based on Curvature Information and Speed Limits by
 * Citlalli Gamez Serna and Yassine Ruichek
 *
 * */


void delay_ms(unsigned int  delay);
int calculateWheelSlip(int *wheelSpin);
int calculateSteerSensitivity(int pubSpeed);

//MATLAB Applications
void send_float (float arg);
float numericalDerivativeDist(float dist);
float accelerationDemand(float dist, float follower_velX, float headway);
int calculateEuclidianDistance(float follower_pos[3], float leader_pos[3]);

float numericalDerivativeKP(float kp);
float numericalDerivativeKD(float kd);
float steering (float angular_vel, float headingError, float lateralError);
double int_simpson(double from, double to, double n, double m, double c);
float min(float a, float b);
float max(float a, float b);

//MATLAB Variables8
//Inputs

float prevTime, currentTime;
float timeStep;

// Track Data for ISA
static int curve1Start = 225;
static int curve2Start = 515;
static int curve3Start = 1160;
static int curve4Start = 1450;

static int curve1End = 411;
static int curve2End = 713;
static int curve3End = 1370;
static int curve4End = 1656;


static float lead_pos[3];
static float fol_pos[]={179,10,0};

//static float lead_pos_x, lead_pos_y, lead_pos_z, fol_pos_x, fol_pos_y, fol_pos_z;
static float fol_vel, lead_vel;
static float fol_ang_vel_z, fol_head_error, fol_lat_error, fol_acc_x, fol_yaw, dummy;
float foltravelledDistance=0;

static uint32 ans,ans2;

static int distApartRadar;
static float throttle, brake, steer;

void initializeProfiler()
{
    /* Enable PMU Cycle Counter for Profiling */

    _pmuInit_();
    _pmuEnableCountersGlobal_();
    _pmuResetCycleCounter_();
    _pmuStartCounters_(pmuCYCLE_COUNTER);

}

uint32_t getProfilerTimerCount()
{
    return _pmuGetCycleCount_();
}



inline void sciDisplayText(sciBASE_t *sci, uint8 *text,uint32 length)
{
    while(length--)
    {
        while ((sci->FLR & 0x4) == 4); /* wait until busy */
        sciSendByte(sci,*text++);      /* send out text   */
    };
}



/* Task1 */
void canTask(void *pvParameters)
{
    //for periodicity
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();

    while (1)
    {
        vTaskDelayUntil(&xLastWakeTime, 10); //

        if(xSemaphoreTake(canIntRxSem, 0) == pdTRUE)
        {

            if(mailBox == canMESSAGE_BOX1 || mailBox == canMESSAGE_BOX21 || mailBox == canMESSAGE_BOX31)
            {

                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data); // Receive Completed
                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&fol_pos[0], &ans, 4);
                memcpy(&fol_pos[1], &ans2, 4);
                if(xSemaphoreGive(cruiseControlSem) == pdTRUE)
                {
                    //Can happen if the semaphore is not released from CAN task, but will not
                }


            }

            if(mailBox == canMESSAGE_BOX2 || mailBox == canMESSAGE_BOX12 || mailBox == canMESSAGE_BOX22 || mailBox == canMESSAGE_BOX32)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&fol_pos[2], &ans, 4);
                memcpy(&fol_ang_vel_z, &ans2, 4);


            }

            if(mailBox == canMESSAGE_BOX3 || mailBox == canMESSAGE_BOX13 || mailBox == canMESSAGE_BOX23 || mailBox == canMESSAGE_BOX33)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&fol_head_error, &ans, 4);
                memcpy(&fol_lat_error, &ans2, 4);

            }

            if(mailBox == canMESSAGE_BOX4 || mailBox == canMESSAGE_BOX14 || mailBox == canMESSAGE_BOX24 || mailBox == canMESSAGE_BOX34)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&fol_acc_x, &ans, 4);
                memcpy(&fol_vel, &ans2, 4);


            }

            if(mailBox == canMESSAGE_BOX5 || mailBox == canMESSAGE_BOX15 || mailBox == canMESSAGE_BOX25 || mailBox == canMESSAGE_BOX35)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&fol_yaw, &ans, 4);
                memcpy(&dummy, &ans2, 4);


            }

            if(mailBox == canMESSAGE_BOX6 || mailBox == canMESSAGE_BOX16 || mailBox == canMESSAGE_BOX26 || mailBox == canMESSAGE_BOX36)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));
                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&lead_vel, &ans, 4);
                memcpy(&lead_pos[0], &ans2, 4);


            }

            if(mailBox == canMESSAGE_BOX7 || mailBox == canMESSAGE_BOX17 || mailBox == canMESSAGE_BOX27 || mailBox == canMESSAGE_BOX37)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);
                memcpy(&lead_pos[1], &ans, 4);
                //memcpy(&lead_pos[2], &ans2, 4);
                // Replace this also in simulink. Instead of lead_pos[2] send foltravelledDistance as the value.
                memcpy(&foltravelledDistance, &ans2, 4);


            }

            if(mailBox == canMESSAGE_BOX8 || mailBox == canMESSAGE_BOX18 || mailBox == canMESSAGE_BOX28 || mailBox == canMESSAGE_BOX38)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);

            }

            if(mailBox == canMESSAGE_BOX9 || mailBox == canMESSAGE_BOX19 || mailBox == canMESSAGE_BOX29 || mailBox == canMESSAGE_BOX39)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);  // Receive Completed

                //First float value from CAN msg
                ans = ((rx_data[0]<<24)|(rx_data[1]<<16)|(rx_data[2]<<8)|rx_data[3]);
                //Second float value from CAN msg
                ans2 = ((rx_data[4]<<24)|(rx_data[5]<<16)|(rx_data[6]<<8)|rx_data[7]);

                currentTime = xTaskGetTickCount ();
                timeStep = (currentTime - prevTime)/100000;
                prevTime = currentTime;
            }

            if(mailBox == canMESSAGE_BOX10|| mailBox == canMESSAGE_BOX20 || mailBox == canMESSAGE_BOX30 || mailBox == canMESSAGE_BOX40)
            {
                while(!canIsRxMessageArrived(canREG1, mailBox));
                if(canIsRxMessageArrived(canREG1, mailBox))
                {
                    canGetData(canREG1, mailBox, rx_data);  // Receive Completed


            }

            // 0*8B message for Lane Change Trigger

            if(mailBox == canMESSAGE_BOX11  ){
                while(!canIsRxMessageArrived(canREG1, mailBox));

                canGetData(canREG1, mailBox, rx_data);
                //laneChangeCount = rx_data[0];

            }
        }
    }
}

}




//Collision Avoidance Task :

void CATask(void *pvParameters){
    //For periodicity
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    int i=0;
    while(1)
    {
        vTaskDelayUntil(&xLastWakeTime, 2000); //3ms
        // CANStart=xTaskGetTickCount ();



    }

}

// Steer Control :

void steerTask(void *pvParameters)
{
    //For periodicity
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    while(1)
    {


    vTaskDelayUntil(&xLastWakeTime, 2000); //5ms


        steer = steering(fol_ang_vel_z, fol_head_error, fol_lat_error);


    }

}


//Cruise Control Algorithm   :

void cruiseControlTask(void *pvParameters)
{
    //For periodicity
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    while(1)
    {
        vTaskDelayUntil(&xLastWakeTime, 2000); //with 100 Khz frequency, 1 ticks of ostickctr =  0.01 ms; 1000 ticks = 10 ms
        if(xSemaphoreTake(cruiseControlSem, 0) == pdTRUE)
        {
            gioSetPort(hetPORT1, gioGetPort(hetPORT1) ^ 0x80000021);

            /****** Implement your Cruise Control Algorithm here ***************/


            // Sample code is given below
            distApartRadar = calculateEuclidianDistance(fol_pos, lead_pos);

            if (distApartRadar<10 )
            {
                if(fol_vel > lead_vel){
                    brake = 1;
                    throttle = 0;
                }
            }

            else{
                brake = 0;
                throttle = 1;
            }


            /******* Implement your Intelligent Speed Advisory Algorithm here ********/





            /******************** Sending via UART - back to TORCS ******************************/

            send_float(throttle);
            send_float(steer);
            send_float(brake);

        }
    }
}


void main(void)
{

    /* Set high end timer GIO port hetPort pin direction to all output */
    gioSetDirection(hetPORT1, 0xFFFFFFFF);

    /* UART init */
    sciInit();
    sciSetBaudrate(scilinREG, 115200U);


    /* Configuring CAN1: MB1, Msg ID-0x82 to recieve from ABS Gateway; MB2, Msg ID-0x81 to recieve from Suspension/OBD Gateway */
    canInit();

    vimDisableInterrupt(16);

    canIntRxSem = xSemaphoreCreateBinary();
    if(NULL == canIntRxSem)
    {
        /* Failed to create Semaphore */
        while(1);
    }

    accSem = xSemaphoreCreateBinary();
    if(NULL == accSem)
    {
        /* Failed to create Semaphore */
        while(1);
    }


    cruiseControlSem = xSemaphoreCreateBinary();
    if(NULL == cruiseControlSem)
    {
        /* Failed to create Semaphore */
        while(1);
    }

    if (xTaskCreate(canTask,"CAN Task", configMINIMAL_STACK_SIZE, NULL, 7, &canTaskTcb) != pdTRUE)
    {
        /* Task could not be created */
        while(1);
    }


    if (xTaskCreate(steerTask,"Steer Task", configMINIMAL_STACK_SIZE, NULL, 5, &steerTaskTcb) != pdTRUE)
        {
            /* Task could not be created */
            while(1);
        }

    if (xTaskCreate(cruiseControlTask,"Cruise Control Task", configMINIMAL_STACK_SIZE, NULL, 4, &cruiseControlTaskTcb) != pdTRUE)
        {
            /* Task could not be created */
            while(1);
        }



    if (xTaskCreate(CATask,"Collision Avoidance Task", UART_STACK_SIZE, NULL, 3, &CATcb) != pdTRUE)
        {

           //  Task could not be created
            while(1);
        }

    vimEnableInterrupt(16, SYS_IRQ);

    /* Start Scheduler */
    vTaskStartScheduler();

    /* Run forever */
    while(1);
    /* USER CODE END */
}

/* can interrupt notification */
void canMessageNotification(canBASE_t *node, uint32 messageBox)
{
    if(node == canREG1)
    {
        mailBox = messageBox;
        if(xSemaphoreGiveFromISR(canIntRxSem, NULL) == pdTRUE)
        {

        }
    }
}


float max(float a, float b){
    if(a>b){
        return a;
    }
    if(b>a){
        return b;
    }
    else{
        return 0;
    }

}

float min(float a, float b){

    if(a<b){
        return a;
    }
    if(b<a){
        return b;
    }
    else{
            return 0;
        }
}


void send_float (float arg)
{
    // get access to the float as a byte-array:
    uint8 *data = (uint8*)&arg;
    uint8 *data3 = (uint8*)&arg+3;
    uint8 *data2 = (uint8*)&arg+2;
    uint8 *data1 = (uint8*)&arg+1;

    // write the data to the serial (little endian since matlab only reads it this way)
    //sciSend (scilinREG, 2, &header[0]);
    sciSend (scilinREG, 1, data3);
    sciSend (scilinREG, 1, data2);
    sciSend (scilinREG, 1, data1);
    sciSend (scilinREG, 1, data);
    //sciSend (scilinREG, 2, &terminator[0]);
}

/***********************************Speed Control Start***********************************/

/* Calculate Euclidian Distance between the 2 vehicles */
int calculateEuclidianDistance(float follower_pos[3], float leader_pos[3])
{
    int diff1 = (follower_pos[0]-leader_pos[0])*(follower_pos[0]-leader_pos[0]);
    int diff2 = (follower_pos[1]-leader_pos[1])*(follower_pos[1]-leader_pos[1]);
    int dist = sqrt(diff1+diff2);
    return (dist);

}

float numericalDerivativeDist(float dist)
{
    static float oldDist = 0.0;
    float result = (dist - oldDist)/timeStep;
    oldDist = dist;
    return result;

}

float accelerationDemand(float dist, float follower_velX, float headway)
{
    float headway_vel = headway * follower_velX;
    float gain = (headway_vel + dist ) * 0.1;
    float vel = numericalDerivativeDist(dist);
    float accelDemand = -(gain + vel);
    return accelDemand;
}



/***********************************Speed Control End***********************************/

/***********************************Steering Control Start***********************************/

float numericalDerivativeKP(float kp)
{
    static float oldkp = 0.0;

    float result = (kp - oldkp)/timeStep;
    oldkp = 1.6*kp;
    return result;

}

float numericalDerivativeKD(float kd)
{
    static float oldkd = 0.0;

    float result = (kd - oldkd)/timeStep;
    oldkd = kd;
    return result;

}



float steering (float angular_vel, float headingError, float lateralError)
{

// Implement your steering control here


}

/***********************************Steering Control End***********************************/

/***********************************Acceleration Control Start***********************************/

#define CONSTANT_COMPARATOR -0.1

//requires accel demand
//Full braking available (RADAR)
void accelerationControl(float accelDemand, float follower_accelX, int sensor)
{
    float m,c,integral,result;
    if(accelDemand >= (-0.1))
    {
        static float oldGainNsum = 0;   //y-coordinate

        float accelDemandGain = 1.5 * accelDemand;
        float gainNsum = 10 *(accelDemand - follower_accelX);
        //integrate?!
        //Find eqn of line (first point 0,0) Y = mX +C
        m = (gainNsum-oldGainNsum)/(timeStep);
        c = gainNsum - (m * timeStep);
        //func = m*X +C
        integral =  int_simpson(0.0, gainNsum, 10, m, c);
        if (integral > 1.0)
            integral = 1.0;
        else if (integral < (-1.0))
            integral = -1.0;

        result = integral+accelDemandGain;
        oldGainNsum = gainNsum;
        //return result;

        //throttle_radar = result;
        throttle = result;


        //throttle = result;
        brake = 0;


    }
    else
    {
        static float oldBrakeGainNsum = 0;
        float brakeGainNsum = follower_accelX-accelDemand;
        m = (brakeGainNsum-oldBrakeGainNsum)/(timeStep);
        c = brakeGainNsum - (m * timeStep);
        integral =  int_simpson(0.0, brakeGainNsum, 10, m, c);
        if (integral > 1.0)
            integral = 1.0;
        else if (integral < (-1.0))
            integral = -1.0;

        result = integral+ 0.005 * brakeGainNsum;
        oldBrakeGainNsum = brakeGainNsum;
        if (result <= 1.0)
        {
            //return 1.0;

                brake = result;

        }



        else if (result < (0.0))
        {
            //return (-1.0);

            brake = 0;
        }

        else if (result > (1.0))
        {
            //return result;
            if(result > brake){
                brake = 1;
            }
        }
        throttle = 0;
    }
}


//Veh to Veh Comms Control - Brake force limited

void accelerationControlVeh(float accelDemand, float follower_accelX)
{
    float m,c,integral,result;
    //float timeStep = 0.02;    //x-coordinate
    static int i = 0;
    //  static int j = 0;

    i++;
    if (i == 200){
        i = 0;
    }

    if(accelDemand >= (-0.1))
    {
        static float oldGainNsum = 0;   //y-coordinate

        float accelDemandGain = 1.5 * accelDemand;
        float gainNsum = 10 *(accelDemand - follower_accelX);
        //integrate?!
        //Find eqn of line (first point 0,0) Y = mX +C
        m = (gainNsum-oldGainNsum)/(timeStep);
        c = gainNsum - (m * timeStep);
        //func = m*X +C
        integral =  int_simpson(0.0, gainNsum, 10, m, c);
        if (integral > 1.0)
            integral = 1.0;
        else if (integral < (-1.0))
            integral = -1.0;

        result = integral+accelDemandGain;
        oldGainNsum = gainNsum;
        //return result;
        throttle = result;


    }
    else
    {
        static float oldBrakeGainNsum = 0;
        float brakeGainNsum = follower_accelX-accelDemand;
        m = (brakeGainNsum-oldBrakeGainNsum)/(timeStep);
        c = brakeGainNsum - (m * timeStep);
        integral =  int_simpson(0.0, brakeGainNsum, 10, m, c);
        if (integral > 1.0)
            integral = 1.0;
        else if (integral < (-1.0))
            integral = -1.0;

        result = integral+ 0.005 * brakeGainNsum;
        oldBrakeGainNsum = brakeGainNsum;
        if (result > 0.3)
        {
            //return 1.0;
            brake = 0.30;
        }

        else if (result < (-0.3))
        {
            //return (-1.0);
            brake = -0.30;
        }

        else
        {
            //return result;
            brake = result;
        }
        throttle = 0;


    }
}

double int_simpson(double from, double to, double n, double m, double c)
{
    double h = (to - from) / n;
    double sum1 = 0.0;
    double sum2 = 0.0;
    int i;

    for(i = 0;i < n;i++)
        //return eqn
        sum1 += m*(from + h * i + h / 2.0) + c;

    for(i = 1;i < n;i++)
        sum2 += m * (from + h * i) + c;

    return h / 6.0 * ((m*(from)+c) + (m*(to)+c) + 4.0 * sum1 + 2.0 * sum2);
}


/***********************************Acceleration Control End***********************************/
